# filter(doctor.tier %in% c("A", "B"),
#        Year != "2016")  %>%
left_join(meeting_data_m, by = c("Year", "Quarter", "doctorid" = "doctor.id")) %>%
left_join(smmy_psc_qtr_gather, by = c("Year", "Quarter", "doctorid")) %>%
group_by(Year, Quarter, imeeting.type) %>%
summarise(doc_cnt = n_distinct(doctorid),
meeting_cnt = sum(meeting_cnt, na.rm = TRUE),
avg_meeting_cnt = meeting_cnt / doc_cnt)
eda_dat_tgt_with_meeting_adv_all$adv_flag <- "All"
eda_dat_tgt_with_meeting_adv_all$avg_meeting_cnt_all <- 999
eda_dat_tgt_with_meeting_adv_all <- rbind(eda_dat_tgt_with_meeting_adv,
eda_dat_tgt_with_meeting_adv_all) %>%
arrange(Year, Quarter, imeeting.type)
eda_dat_tgt_with_meeting_adv_all$adv_flag <-
ifelse(eda_dat_tgt_with_meeting_adv_all$adv_flag == "1",
"Physicians with Progression",
"Overall Physicians")
##-- combine call data into eda data
call_dat_m <- call_dat %>%
mutate(Year = substr(call.date, 1, 4),
Quarter = ifelse(as.numeric(substr(call.date, 6, 7)) %in% c(1, 2, 3),
"Q1",
ifelse(as.numeric(substr(call.date, 6, 7)) %in% c(4, 5, 6),
"Q2",
ifelse(as.numeric(substr(call.date, 6, 7)) %in% c(7, 8, 9),
"Q3",
"Q4")))) %>%
group_by(Year, Quarter, doctorid) %>%
summarise(call_cnt = n()) %>%
mutate(doctorid = as.character(doctorid))
eda_dat_tgt_with_call <- eda_dat_tgt %>%
left_join(doc_tier, by = c("doctorid")) %>%
# filter(doctor.tier %in% c("A", "B")) %>%
left_join(call_dat_m, by = c("Year", "Quarter", "doctorid")) %>%
group_by(Year, Quarter, region, hcp.major) %>%
summarise(doc_cnt = n_distinct(doctorid),
call_cnt = sum(call_cnt, na.rm = TRUE),
avg_call_cnt = call_cnt / doc_cnt)  %>%
group_by(Year, Quarter, hcp.major) %>%
do(plyr::rbind.fill(., data.frame(Year = first(.$Year),
Quarter = first(.$Quarter),
hcp.major = first(.$hcp.major),
region = "Total",
doc_cnt = sum(.$doc_cnt, na.rm = TRUE),
call_cnt = sum(.$call_cnt, na.rm = TRUE),
avg_call_cnt = sum(.$call_cnt, na.rm = TRUE) /
sum(.$doc_cnt, na.rm = TRUE))))
eda_dat_tgt_with_call_all <- eda_dat_tgt_with_call%>%
group_by(Year, Quarter, region) %>%
summarise(doc_cnt = sum(doc_cnt, na.rm = TRUE),
call_cnt = sum(call_cnt, na.rm = TRUE),
avg_call_cnt = call_cnt / doc_cnt)
eda_dat_tgt_with_call_all$hcp.major <- "Overall"
eda_dat_tgt_with_call_all <- rbind(eda_dat_tgt_with_call,
eda_dat_tgt_with_call_all)
eda_dat_tgt_with_call_adv <- eda_dat_tgt %>%
left_join(doc_tier, by = c("doctorid")) %>%
# filter(doctor.tier %in% c("A", "B"),
#        Year != "2016")  %>%
left_join(call_dat_m, by = c("Year", "Quarter", "doctorid")) %>%
left_join(smmy_psc_qtr_gather, by = c("Year", "Quarter", "doctorid")) %>%
group_by(Year, Quarter, region, adv_flag) %>%
summarise(doc_cnt = n_distinct(doctorid),
call_cnt = sum(call_cnt, na.rm = TRUE),
avg_call_cnt = call_cnt / doc_cnt) %>%
filter(adv_flag == 1) %>%
mutate(adv_flag = as.character(adv_flag)) %>%
group_by(Year, Quarter, region) %>%
mutate(doc_cnt_all = sum(doc_cnt, na.rm = TRUE),
call_cnt_all = sum(call_cnt, na.rm = TRUE),
avg_call_cnt_all = call_cnt_all / doc_cnt_all) %>%
select(-doc_cnt_all, -call_cnt_all)
eda_dat_tgt_with_call_adv_all <- eda_dat_tgt %>%
left_join(doc_tier, by = c("doctorid")) %>%
# filter(doctor.tier %in% c("A", "B"),
#        Year != "2016")  %>%
left_join(call_dat_m, by = c("Year", "Quarter", "doctorid")) %>%
left_join(smmy_psc_qtr_gather, by = c("Year", "Quarter", "doctorid")) %>%
group_by(Year, Quarter, region) %>%
summarise(doc_cnt = n_distinct(doctorid),
call_cnt = sum(call_cnt, na.rm = TRUE),
avg_call_cnt = call_cnt / doc_cnt)
eda_dat_tgt_with_call_adv_all$adv_flag <- "All"
eda_dat_tgt_with_call_adv_all$avg_call_cnt_all <- 999
eda_dat_tgt_with_call_adv_all <- rbind(eda_dat_tgt_with_call_adv,
eda_dat_tgt_with_call_adv_all) %>%
arrange(Year, Quarter, region)
eda_dat_tgt_with_call_adv_all$adv_flag <-
ifelse(eda_dat_tgt_with_call_adv_all$adv_flag == "1",
"Physicians with Progression",
"Overall Physicians")
eda_dat_tgt_with_call_adv_all <- eda_dat_tgt_with_call_adv_all %>%
group_by(Year, Quarter, adv_flag) %>%
do(plyr::rbind.fill(., data.frame(Year = first(.$Year),
Quarter = first(.$Quarter),
adv_flag = first(.$adv_flag),
region = "Total",
doc_cnt = sum(.$doc_cnt, na.rm = TRUE),
call_cnt = sum(.$call_cnt, na.rm = TRUE),
avg_call_cnt = sum(.$call_cnt, na.rm = TRUE) /
sum(.$doc_cnt, na.rm = TRUE))))
runApp('Perception_Score_Tracking')
View(eda_dat_tgt_with_call_all)
View(eda_dat_tgt_with_call_all)
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
shiny::runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
runApp('Perception_Score_Tracking')
library(shiny)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
install.packages("rmarkdown")
library(shiny)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
library(shiny)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.pdf")
file.copy("report.pdf", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
library(shiny)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.pdf",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.pdf")
file.copy("report.pdf", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
library(shiny)
server <- function(input, output) {
output$downloadReport <- downloadHandler(
filename = function() {
paste('my-report', sep = '.', switch(
input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
))
},
content = function(file) {
src <- normalizePath('report.Rmd')
# temporarily switch to the temp dir, in case you do not have write
# permission to the current working directory
owd <- setwd(tempdir())
on.exit(setwd(owd))
file.copy(src, 'report.Rmd', overwrite = TRUE)
out <- rmarkdown::render('report.Rmd',
params = list(text = input$text),
switch(input$format,
PDF = pdf_document(),
HTML = html_document(),
Word = word_document()
))
file.rename(out, file)
}
)
}
ui <- fluidPage(
tags$textarea(id="text", rows=20, cols=155,
placeholder="Some placeholder text"),
flowLayout(radioButtons('format', 'Document format', c('HTML', 'Word'),
inline = TRUE),
downloadButton('downloadReport'))
)
shinyApp(ui = ui, server = server)
install.packages("ReporteRs")
library(shiny)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
selectInput("sel",label = "col",choices = colnames(iris)[2:ncol(iris)]),
downloadButton('downloadData', 'Download')
)
)
library(shiny)
library(DT)
library(ReporteRs)
shinyServer(function(input, output,session) {
output$downloadData <- downloadHandler(
filename = "file.pptx",
content = function(file) {
doc = pptx( )
# Slide 1 : Title slide
#+++++++++++++++++++++++
doc <- addSlide(doc, "Title Slide")
doc <- addTitle(doc,"Create a PowerPoint document from R software")
doc <- addSubtitle(doc, "R and ReporteRs package")
# Slide 2 : Add Word Cloud
#+++++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Bar Plot")
#newData=rawInputData(); # Function which captures data (.csv file) when I have input it through R shiny
#words_list = strsplit(as.character(newData$CONTENT), " ") #CONTENT is the column which contains the test data
#words_per_tweet = sapply(words_list, length)
words_per_tweet=iris
pptwordcloud<-function(){
barplot(table(words_per_tweet[,c("Sepal.Length",input$sel)]), border=NA,main="Distribution of words per tweet", cex.main=1,col="darkcyan")
}#pptwordcloud<-barplot(table(words_per_tweet), col="darkcyan")
doc <- addPlot(doc, fun= pptwordcloud,vector.graphic =FALSE )
writeDoc(doc,file)
}
)
})
library(shiny)
ui =
# Use a fluid Bootstrap layout
fluidPage(
selectInput("sel",label = "col",choices = colnames(iris)[2:ncol(iris)]),
downloadButton('downloadData', 'Download')
)
library(shiny)
library(DT)
library(ReporteRs)
server = function(input, output,session) {
output$downloadData <- downloadHandler(
filename = "file.pptx",
content = function(file) {
doc = pptx( )
# Slide 1 : Title slide
#+++++++++++++++++++++++
doc <- addSlide(doc, "Title Slide")
doc <- addTitle(doc,"Create a PowerPoint document from R software")
doc <- addSubtitle(doc, "R and ReporteRs package")
# Slide 2 : Add Word Cloud
#+++++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Bar Plot")
#newData=rawInputData(); # Function which captures data (.csv file) when I have input it through R shiny
#words_list = strsplit(as.character(newData$CONTENT), " ") #CONTENT is the column which contains the test data
#words_per_tweet = sapply(words_list, length)
words_per_tweet=iris
pptwordcloud<-function(){
barplot(table(words_per_tweet[,c("Sepal.Length",input$sel)]), border=NA,main="Distribution of words per tweet", cex.main=1,col="darkcyan")
}#pptwordcloud<-barplot(table(words_per_tweet), col="darkcyan")
doc <- addPlot(doc, fun= pptwordcloud,vector.graphic =FALSE )
writeDoc(doc,file)
}
)
}
runApp(ui = ui, server = server)
?runApp
library(shiny)
library(shiny)
library(DT)
library(ReporteRs)
app <- shinyApp(ui =
# Use a fluid Bootstrap layout
fluidPage(
selectInput("sel",label = "col",choices = colnames(iris)[2:ncol(iris)]),
downloadButton('downloadData', 'Download')
),
server = function(input, output,session) {
output$downloadData <- downloadHandler(
filename = "file.pptx",
content = function(file) {
doc = pptx( )
# Slide 1 : Title slide
#+++++++++++++++++++++++
doc <- addSlide(doc, "Title Slide")
doc <- addTitle(doc,"Create a PowerPoint document from R software")
doc <- addSubtitle(doc, "R and ReporteRs package")
# Slide 2 : Add Word Cloud
#+++++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Bar Plot")
#newData=rawInputData(); # Function which captures data (.csv file) when I have input it through R shiny
#words_list = strsplit(as.character(newData$CONTENT), " ") #CONTENT is the column which contains the test data
#words_per_tweet = sapply(words_list, length)
words_per_tweet=iris
pptwordcloud<-function(){
barplot(table(words_per_tweet[,c("Sepal.Length",input$sel)]), border=NA,main="Distribution of words per tweet", cex.main=1,col="darkcyan")
}#pptwordcloud<-barplot(table(words_per_tweet), col="darkcyan")
doc <- addPlot(doc, fun= pptwordcloud,vector.graphic =FALSE )
writeDoc(doc,file)
}
)
})
runApp(app)
library(ReporteRs)
library(magrittr)
mydoc <- docx() %>%
addParagraph(value = 'Correlation matrix', style='Titre2') %>%
addParagraph(value='Estimates') %>%
addFlexTable(FlexTable(cormat)) %>%
addParagraph(value = 'P-values') %>%
addFlexTable(FlexTable(corpval)) %>%
addParagraph(value = "Boxplots", style='Titre2') %>%
addPlot(fun=print, x = plt, height=3, width=5) %>%
writeDoc(file = 'Report.docx)
''
'
mydoc <- docx() %>%
addParagraph(value = 'Correlation matrix', style='Titre2') %>%
addParagraph(value='Estimates') %>%
addFlexTable(FlexTable(cormat)) %>%
addParagraph(value = 'P-values') %>%
addFlexTable(FlexTable(corpval)) %>%
addParagraph(value = "Boxplots", style='Titre2') %>%
addPlot(fun=print, x = plt, height=3, width=5) %>%
writeDoc(file = 'Report.docx')
mydoc <- pptx( )
mydoc
str(mydoc)
slide.layouts(mydoc)
mydoc <- addSlide(mydoc, "Two Content" )
# add into mydoc first 10 lines of iris
mydoc <- addTitle( mydoc, "First 10 lines of iris" )
mydoc <- addFlexTable( mydoc, vanilla.table(iris[1:10,] ) )
# add text into mydoc (and an empty line just before). Paragraph
# properties will be those of the shape of the used layout.
mydoc <- addParagraph( mydoc, value = c("", "Hello World!") )
mydoc <- addSlide( mydoc, "Title and Content" )
# add a plot into mydoc
mydoc <- addPlot( mydoc, function() barplot( 1:8, col = 1:8 ) )
filename <- "base_example.pptx" # the document to produce
# write mydoc
writeDoc( mydoc, filename )
library(webshot)
library(ReporteRs)
library(webshot)
webshot::install_phantomjs()
webshot::install_phantomjs()
p <- plot_ly(doc_cnt_qtr, x = ~ Quarter, y = ~ doc_cnt,
type = 'bar',
# text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "Total Physicians' Count by Quarter",
xaxis = list(title = "Quarter"),
yaxis = list(title = "Physician Count"),
annotations = list(x = doc_cnt_qtr$Quarter,
y = doc_cnt_qtr$doc_cnt,
text = doc_cnt_qtr$doc_cnt,
xanchor = 'center',
yanchor = 'bottom',
showarrow = FALSE),
autosize = F,
width = 100,
height = 100,
margin =  list(
l = 10,
r = 10,
b = 10,
t = 10,
pad = 4
)
)
library(plotly)
p <- plot_ly(doc_cnt_qtr, x = ~ Quarter, y = ~ doc_cnt,
type = 'bar',
# text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "Total Physicians' Count by Quarter",
xaxis = list(title = "Quarter"),
yaxis = list(title = "Physician Count"),
annotations = list(x = doc_cnt_qtr$Quarter,
y = doc_cnt_qtr$doc_cnt,
text = doc_cnt_qtr$doc_cnt,
xanchor = 'center',
yanchor = 'bottom',
showarrow = FALSE),
autosize = F,
width = 100,
height = 100,
margin =  list(
l = 10,
r = 10,
b = 10,
t = 10,
pad = 4
)
)
export(p, "./03_Outputs/test.jpeg")
?webshot::install_phantomjs
webshot::install_phantomjs()
p <- plot_ly(doc_cnt_qtr, x = ~ Quarter, y = ~ doc_cnt,
type = 'bar',
# text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "Total Physicians' Count by Quarter",
xaxis = list(title = "Quarter"),
yaxis = list(title = "Physician Count"),
annotations = list(x = doc_cnt_qtr$Quarter,
y = doc_cnt_qtr$doc_cnt,
text = doc_cnt_qtr$doc_cnt,
xanchor = 'center',
yanchor = 'bottom',
showarrow = FALSE),
autosize = F,
width = 100,
height = 100,
margin =  list(
l = 10,
r = 10,
b = 10,
t = 10,
pad = 4
)
)
ReporteRs::export(p, "./03_Outputs/test.jpeg")
plotly::export(p, "./03_Outputs/test.jpeg")
plotly_IMAGE(p, format = "png", out_file = "./03_Outputs/output.png")
plotly::export(p, "./03_Outputs/test.jpeg")
